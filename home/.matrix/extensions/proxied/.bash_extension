## Proxied
# A matrix global proxy configuration tool
# version 0.0.1-alpha 
## ## ## ## 
# Set your globalurl_proxy in the `.matrix_config`
# export globalurl_proxy="proxyUsername:proxyPassword@proxy.server.com:port"
#
## ## ## ## 
#
# README: docs/README.proxied.md
#
## ## ## ##
#
# Setting http.<url>.sslVerify to false may help you quickly get going if 
# your workplace employs man-in-the-middle HTTPS proxying. Longer term, you 
# could get the root CA that they are applying to the certificate chain and 
# specify it with either http.sslCAInfo or http.sslCAPath.
# 

if [  -z "$globalurl_proxy" ]; then 
    echo_warn "Proxy Configuration loading.."
    echo_warn "$globalurl_proxy"

    path_to_corkscrew=$(command -v corkscrew)
    if [ -x "$path_to_corkscrew" ]; then
        echo_notify "Corkscrew found."
    fi
else 
    echo_error "'matrix proxied extension' loaded without setting \$globalurl_proxy"
fi 



######## Bash functions ############

function curl_proxy {
    curl --connect-timeout 10 -s --proxy "${globalurl_proxy}" -L "$@"
}

function wget_proxy {
    wget --connect-timeout 10 --quiet -e use_proxy=yes -e http_proxy="${globalurl_proxy}" "$@"
}

function proxy_set {
    export {http,https,ftp}_proxy="$globalurl_proxy"
    # git config --global http.sslVerify false
    git config --global http.proxy "http://$globalurl_proxy"
    git config --global https.proxy "https://$globalurl_proxy"
    grep -q '^use_proxy' ~/.wgetrc && sed -i 's/^use_proxy.*/use_proxy=on/' ~/.wgetrc || echo 'use_proxy=on' >> ~/.wgetrc
    strict_ssl_unset
}

function proxy_unset {
    unset {http,https,ftp}_proxy
    git proxyclear
    strict_ssl_set
    sed -i '/^use_proxy/,$d' ~/.wgetrc
}

function proxy_show {
    echo 'env settings: ' && env | grep -i '_proxy'
    echo 'wget settings: ' && grep -q '^use_proxy' ~/.wgetrc
    echo 'git settings: ' && git config --global --get-regexp http.*
    strict_ssl_show
}

function check_proxy_driver {
    grep "proxydriver.*using" /var/log/syslog | tail -n 1
}

<<COMMENT1
# GNOME keeps its own proxy settings. This can handle PAC files, but still has the problem that it is system-wide

## GNOME proxy settings

$> gsettings list-recursively org.gnome.system.proxy
org.gnome.system.proxy use-same-proxy true
org.gnome.system.proxy mode 'none'
org.gnome.system.proxy autoconfig-url ''
org.gnome.system.proxy ignore-hosts ['localhost', '127.0.0.0/8', '::1']
org.gnome.system.proxy.ftp host ''
org.gnome.system.proxy.ftp port 0
org.gnome.system.proxy.socks host ''
org.gnome.system.proxy.socks port 0
org.gnome.system.proxy.http host ''
org.gnome.system.proxy.http port 8080
org.gnome.system.proxy.http use-authentication false
org.gnome.system.proxy.http authentication-password ''
org.gnome.system.proxy.http authentication-user ''
org.gnome.system.proxy.http enabled false
org.gnome.system.proxy.https host ''
org.gnome.system.proxy.https port 0
$> gsettings get org.gnome.system.proxy.http host
''
COMMENT1

<<COMMENT2
nmcli con show RestonOffice |grep proxy
proxy.method:                           auto
proxy.browser-only:                     no
proxy.pac-url:                          http://pacfile.example.com/proxy.pac
proxy.pac-script:                       --
COMMENT2
